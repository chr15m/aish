# aish: AI shell completions
# <https://github.com/chr15m/aish>

# vi: ft=bash
# Why no hash-bang?
# It's so this script can be sourced under both bash and zsh.

# Website: <https://mccormick.cx>
# Donate:  <https://www.patreon.com/chr15m>
# Donate:  <ko-fi.com/chr15m>

# TODO:
# - set up basic tests via github actions

if [ "$1" = "" -o "$1" = "-h" ]
then
  echo "Usage: . aish QUERY"
  echo
  echo "QUERY:   tell the AI what you want"
  echo "Example: '. aish a for loop going from 5 to 15'."
  echo "Note:    You must include the . to source the script."
  echo "         The result will be available from history with the up key."
  exit 0
fi

OS=`uname`
OS=${OS/Darwin/Mac OSX}

# test if user has sourced the script and notify them if not

_throw_source_error () {
  echo "Please source aish in a bash or zsh shell like this:"
  echo ". aish ${@}"
  # echo ${1}
  exit 1
}

case $BASH_VERSION in *.*)
  SHELLNAME="bash"
  ;;
esac
case $ZSH_VERSION  in *.*)
  SHELLNAME="zsh"
  ;;
esac
case "$VERSION" in *zsh*)
  SHELLNAME="zsh"
  ;;
esac

#echo "SHELLNAME: ${SHELLNAME}"
#echo "OS: ${OS}"

if [ "${SHELLNAME}" != "zsh" ] && [ "$SHELLNAME" != "bash" ]
then
  _throw_source_error "${@}"
fi

if [ "${SHELLNAME}" = "bash" ]
then
  (return 0 2>/dev/null) && sourced=1 || sourced=0
  if [ $sourced -eq 0 ]; then
    _throw_source_error "${@}"
  fi
fi

if [ "${SHELLNAME}" = "zsh" ]
then
  if [[ "${ZSH_EVAL_CONTEXT}" = "toplevel" ]]
  then
    _throw_source_error "${@}"
  fi
  if ! (( zsh_eval_context[(I)file] )); then
    _throw_source_error "${@}"
  fi
fi

# exit from ctrl-C without exiting user's shell
trap "return 0" SIGINT

AISH_SHELL="${SHELLNAME}"
AISH_OS="${OS}"

# source aish config file with overrides if it exists
[[ -f ~/.aish ]] && source ~/.aish

# check if API key is set
if [ -z "$OPENAI_API_KEY" ]
then
  echo "Error: OPENAI_API_KEY not set."
  echo
  echo "Get your key from <https://platform.openai.com/account/api-keys>."
  echo "Put it in ~/.aish like this:"
  echo "OPENAI_API_KEY=sk-..."
  echo
  return 1
fi

# start the actual request to OpenAI

request=`echo "${@}" | sed -r 's/"/\\\"/g'`

data='{
  "model": "'${AISH_MODEL:-gpt-4}'",
  "messages": [
  {"role": "system", "content": "You are an AI shell-scripting expert called Aish."},{"role": "user", "content": "Please write a one-liner for '${AISH_SHELL}' shell for performing the following task. Assume you have access to all of the commonly available unix commands on a modern '${AISH_OS}' system. You can separate multi-line commands with a semicolon or double ampersand but please put them on one line. Please only return the exact bash one-liner command without any superfluous words explaining it. IMPORTANT: If you need to ask for clarification or provide any information other than a one-liner solution, please prefix your response with the exact phrase AISH_FEEDBACK: in all caps, with a colon. If you are responding with anything other than a shell script one-liner you MUST include AISH_FEEDBACK: (including the colon) as the start of the response.\n\n Here is the task I would like you to carry out with the one-liner: '$request'"}
  ]
}'

# echo "Sending: ${data}"

echo -ne "...fetching solution..."
json=$( curl -s https://api.openai.com/v1/chat/completions -u ":${OPENAI_API_KEY}" -H 'Content-Type: application/json' -d "${data}" )
echo -ne "\033[2K" ; printf "\r"

if `echo "${json}" | grep -q '"content": '`
then
  result=`echo "${json}" | grep '"content": "' | sed -nr 's/"content": "(.*)"/\1/p' | sed -e 's/^[ \t]*//' | sed -e 's/\\\"/"/g'`
  if [ "${result#AISH_FEEDBACK: }" != "$result" ]
  then
    echo "${result#AISH_FEEDBACK: }"
  else
    echo "Hit Enter to add this command to history or ctrl-C to abort:"
    echo -n "$ ${result}"
    read -r _
    if [ "${SHELLNAME}" = "zsh" ]
    then
      print -s "${result}"
    fi
    if [ "${SHELLNAME}" = "bash" ]
    then
      set -o history
      shopt -s histappend
      history -s "${result}"
      history -w
    fi
    echo "Press the up arrow to access the solution."
  fi
else
  echo "${json}"
fi
